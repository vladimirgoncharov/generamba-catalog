{% include 'header' %}

import UIKit
import SwinjectStoryboard

class {{ prefix }}{{ module_info.name }}ViewController: UIViewController {
    
    typealias Model = <#{{ prefix }}{{ module_info.name }}#>
    
    /*
    enum Segues: String {
        case <#name#> = <#identifier#>
    }
     */
    
    //MARK: - UI
    //@IBOutlet weak var <#view#>: <#type#>!
    
    //MARK: -
    private(set) var model: Model? {
        didSet {
            self.configureView()
        }
    }
    
    //MARK: - init, config and deinit    
    func config(model: Model) {
        self.model = model
    }
    
    deinit {}
    
    //MARK: - life cycle
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.configureView()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
    }
    
    /*
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        switch segue.identifier {
        case Segues.<#name#>.rawValue?:
        default: fatalError("\(segue) not implemented")
        }
    }
     */
}

//MARK: - Updating the view
extension {{ prefix }}{{ module_info.name }}ViewController {
    
    func configureView() {
        //prepare view
    }
}

//MARK: - Routing
extension {{ prefix }}{{ module_info.name }}ViewController {
    func perfrom<#name#>Segue() {
    self.performSegue(withIdentifier: Segues.<#name#>.rawValue, sender: nil)
    }
}

//MARK: - Depedency
extension {{ prefix }}{{ module_info.name }}ViewController {
    class func registerDepedency() {}
}
